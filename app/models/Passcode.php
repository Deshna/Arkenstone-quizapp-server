<?php

class Passcode{
	public static $ranges=
	array([33,126],[57344,57401],[57403,57411],[57430,57445],[57465,57548],[57602,57691]);

	public static $excludes=
	array(0xe059,0xe05b,0xe05c,0xe05e,0xe060,0xe081,0xe084,0xe086,0xe087,
		0xe08a,0xe08c,0xe091,0xe093,0xe0b4,0xe0b5,0xe0b8,0xe10a,0xe112,0xe114,0xe116,0xe118
		,0xe11a,0xe11c,0xe11f,);
	/*array(
		[386,443],[564,687],[976,1051],[1062,1081],[1121,1154],
		[1162,1228],[1283,1319],[1330,1336],[1377,1415],[1488,1514],
		[1542,1546],[1568,1610],[1633,1647],[1654,1699],[1701,1727],
		[1757,1758],[1778,1805],[1810,1839],[1869,1958],[1985,2023],
		[2304,2384],[2451,2472],[2579,2600],[2707,2728],[2835,2856],
		[2919,2935],[2949,2954],[2990,3001],[3047,3066],[3090,3112],
		[3218,3240],[3332,3389],[3461,3478],[3482,3505],[3585,3681],
		[3663,3675],[3873,3891],[3898,3948],[4030,4035],[4036,4037],
		[4039,4044],[4051,4056],[4096,4136],[4162,4183],[4213,4225],
		[4240,4249],[4254,4293],[4304,4346],[4352,4440],[4449,4469],
		[4487,4501],[4520,4546],[4608,4680],[4688,4694],[4704,4744],
		[4752,4784],[4808,4822],[4824,4880],[4888,4954],[4968,4988],
		[4992,5007],[5024,5108],[5120,5147],[5163,5192],[5196,5306],
		[5211,5380],[5392,5437],[5448,5541],[5556,5600],[5601,5632],
		[5640,5702],[5704,5741],[5761,5788],[5792,5820],[5852,5872],
		[6016,6067],[6112,6121],[6320,6355],[6338,6386],[6480,6509],
		[6624,6678],[7424,7467],[7531,7578],[7680,7957],[7968,8005],
		[8031,8061],[8352,8378],[8448,8523],[8528,8585],[8592,8703],
		[8704,8727],[8739,8900],[8903,8982],[8983,8987],[8998,9004],
		[9014,9114],[9152,9166],[9216,9254],[9280,9290],[9312,9470],
		[9484,9632],[9634,9641],[9644,9727],[9728,9740],[9742,9753],
		[9754,9775],[9876,9783],[9784,9799],[9800,9811],[9812,9897],
		[9904,9916],[9920,9921],[9985,10000],[10001,10031],[10032,10060],
		[10067,10087],[10088,10162],[10163,10188],[10224,10239],[10244,10495],
		[10496,10630],[10672,10681],[10686,10711],[10752,10758],[10744,10781],
		[10877,10912],[10926,10938],[11008,11033],[11264,11297],[11312,11345],
		[11360,11441],[11492,11498],[11520,11557],[11568,11623],[11648,11670],
		[12292,12329],[12353,12438],[12548,12585],[12784,12828],[12832,12867],
		[12927,13003],[13056,13174],[13179,13277],[13312,14000],[14001,16000],
		[16001,18000],[18001,19893],[19904,19967],[19969,21000],[21001,23000],
		[23001,26000],[26001,28000],[28001,30000],[30001,31000],[31001,32000],
		[32001,33000],[33001,34000],[34001,35000],[35001,35000],[35001,37000],
		[37001,38000],[38001,39500],[39501,40899],[42240,42294],[42298,42400],
		[42401,42539],[42562,42606],[42645,42647],[42802,42835],[43616,43642],
		[43816,43822],[44032,45052],[45032,46032],[46032,47032],[47032,48032],
		[48032,50032],[50032,51532],[51532,53032],[53032,54032],[54032,55203],
		[50032,55032],[57359,57373],[57366,57371],[57375,57390],[57391,57396],
		[57516,57557],[57599,57599],[57626,57632],[57650,57668],[57766,57776],
		[57856,57858],[57859,57872],[57873,57893],[57949,57982],[58024,58085],
		[58130,58143],[58144,58223],[58240,58394],[58397,58398],[58405,58420],
		[58430,58437],[58481,58494],[58507,58564],[58627,58629],[58653,58668],
		[60000,60500],[60501,61000],[61000,61443],[65020,65020]
		);*/
	
	// Generates a random 16 unicodes from the bove valid codes
	public static function genCode(){
		$codeArray = array();
		$l = sizeof(self::$ranges);
		$l = $l-1;
		for ($i=0; $i < 16; $i++) { 
			$a = rand(0,$l);
			$b = rand(self::$ranges[$a][0],self::$ranges[$a][1]);
			$c = strtoupper(dechex($b));
			while(strlen($c)<4) $c = '0'.$c;
			if(!in_array($c, $codeArray)&&!in_array($b, self::$excludes)){
				$codeArray[$i]=$c;
			}
			else
				$i--;
		}
		shuffle($codeArray);
		return $codeArray;
	}

	public static function genPass($codeArray){
		$ret = array();
		$l = sizeof($codeArray);
		for ($i=0; $i < 8; $i++) { 
			$a = rand(0,$l-1);
			$ret[$i]=$codeArray[$a];
		}
		return $ret;
	}

	// Converts and array of unicodes to string
	public static function toString($codeArray){
		$s = "";
		foreach ($codeArray as $code) {
			$string = '%u'.strtoupper($code);
			$string = preg_replace('/%u([0-9A-F]+)/', '&#x$1;', $string);
			$s.=html_entity_decode($string, ENT_COMPAT, 'UTF-8');
		}
		return $s;
	}

	// Prints and array of unicodes
	public static function printcode($codeArray)
	{	
		echo '
			<style>
				@font-face{
					font-family: arkenstone;
    				src: url('.URL::asset('template/dist/fonts/arkenstone-symbol-font-v1.1.ttf').');
				}
			</style>
		';
		echo '<div style="font-family:arkenstone;background:#333;text-align:center;padding:50px">';
		for ($i=0; $i < sizeof($codeArray); $i++) {
			echo '<span dir="ltr" style="margin-left:2px;font-size: 2em;background:#FFF;color:#000;padding:10px">&#'.hexdec($codeArray[$i]).'</span>';
		}
		echo '</div>';	
		/*$s = self::toString($codeArray);
		$s1 = str_split($s);
		echo '<span style="letter-spacing:20px;font-size:2em">'.$s.'</span>';
		echo '<br>';
		return;
		echo '<div style="background:#555;text-align:center;padding:50px">';
		for ($i=0; $i < sizeof($s1); $i++) {
			echo '<span dir="ltr" style="margin-left:2px;font-size: 2em;background:#111;color:#eee;padding:10px">'.$s1[$i].'</span>';
		}
		echo '</div>';*/
	}
};